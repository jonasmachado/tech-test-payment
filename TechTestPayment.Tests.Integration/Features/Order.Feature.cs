// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TechTestPayment.Tests.Integration.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GerenciamentoDePedidosFeature : object, Xunit.IClassFixture<GerenciamentoDePedidosFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Order.Feature"
#line hidden
        
        public GerenciamentoDePedidosFeature(GerenciamentoDePedidosFeature.FixtureData fixtureData, TechTestPayment_Tests_Integration_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt"), "Features", "Gerenciamento de pedidos", "    Como um sistema integrador\r\n    Quero poder utilizar operações de CRUD de ped" +
                    "idos\r\n    Para poder gerenciar os pedidos", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 9
#line hidden
#line 10
  testRunner.Given("que um vendedor é criado com nome \"Pottencialito Seguradorus\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 11
  testRunner.And("um produto é criado com nome \"Vale presente de seguro garantia\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Criação de pedido")]
        [Xunit.TraitAttribute("FeatureTitle", "Gerenciamento de pedidos")]
        [Xunit.TraitAttribute("Description", "Criação de pedido")]
        [Xunit.TraitAttribute("Category", "clean_sellers")]
        [Xunit.TraitAttribute("Category", "clean_products")]
        public void CriacaoDePedido()
        {
            string[] tagsOfScenario = new string[] {
                    "clean_sellers",
                    "clean_products"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Criação de pedido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
#line 16
    testRunner.Given("que adiciono um produto com o nome \"Vale presente de seguro garantia\" com quantid" +
                        "ade \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 17
    testRunner.And("que informo o vendedor com o nome \"Pottencialito Seguradorus\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 18
    testRunner.And("submeto o post para a rota orders", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 19
    testRunner.Then("o pedido é criado com sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
#line 20
    testRunner.And("o pedido deve constar no banco de dados", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Criação de pedido com vendendor inválido")]
        [Xunit.TraitAttribute("FeatureTitle", "Gerenciamento de pedidos")]
        [Xunit.TraitAttribute("Description", "Criação de pedido com vendendor inválido")]
        [Xunit.TraitAttribute("Category", "clean_sellers")]
        [Xunit.TraitAttribute("Category", "clean_products")]
        public void CriacaoDePedidoComVendendorInvalido()
        {
            string[] tagsOfScenario = new string[] {
                    "clean_sellers",
                    "clean_products"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Criação de pedido com vendendor inválido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
#line 25
    testRunner.Given("que adiciono um produto com o nome \"Vale presente de seguro garantia\" com quantid" +
                        "ade \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 26
    testRunner.And("que informo o vendedor com o nome \"Concorrentus Seguradorus\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 27
    testRunner.Then("ao submeter deve lançar um erro com a mensagem \"[POT-006] The seller does not exi" +
                        "st.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Criação de pedido com produto inválido")]
        [Xunit.TraitAttribute("FeatureTitle", "Gerenciamento de pedidos")]
        [Xunit.TraitAttribute("Description", "Criação de pedido com produto inválido")]
        [Xunit.TraitAttribute("Category", "clean_sellers")]
        [Xunit.TraitAttribute("Category", "clean_products")]
        public void CriacaoDePedidoComProdutoInvalido()
        {
            string[] tagsOfScenario = new string[] {
                    "clean_sellers",
                    "clean_products"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Criação de pedido com produto inválido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
#line 32
    testRunner.Given("que adiciono um produto com o nome \"Seguro automotivo\" com quantidade \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 33
    testRunner.And("que informo o vendedor com o nome \"Pottencialito Seguradorus\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 34
    testRunner.Then("ao submeter deve lançar um erro com a mensagem \"[POT-009] The product does not ex" +
                        "ist.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Transição completa de status de pedido com sucesso")]
        [Xunit.TraitAttribute("FeatureTitle", "Gerenciamento de pedidos")]
        [Xunit.TraitAttribute("Description", "Transição completa de status de pedido com sucesso")]
        [Xunit.TraitAttribute("Category", "clean_sellers")]
        [Xunit.TraitAttribute("Category", "clean_products")]
        public void TransicaoCompletaDeStatusDePedidoComSucesso()
        {
            string[] tagsOfScenario = new string[] {
                    "clean_sellers",
                    "clean_products"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transição completa de status de pedido com sucesso", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
#line 39
    testRunner.Given("que crio um pedido novo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 40
    testRunner.And("atualizo o status do pedido para \"PaymentApproved\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 41
    testRunner.And("atualizo o status do pedido para \"Sent\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 42
    testRunner.And("atualizo o status do pedido para \"Delivered\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 43
    testRunner.Then("o status do pedido deve ser \"Delivered\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Novo pedido deve conter status \"WaitingPayment\"")]
        [Xunit.TraitAttribute("FeatureTitle", "Gerenciamento de pedidos")]
        [Xunit.TraitAttribute("Description", "Novo pedido deve conter status \"WaitingPayment\"")]
        [Xunit.TraitAttribute("Category", "clean_sellers")]
        [Xunit.TraitAttribute("Category", "clean_products")]
        public void NovoPedidoDeveConterStatusWaitingPayment()
        {
            string[] tagsOfScenario = new string[] {
                    "clean_sellers",
                    "clean_products"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Novo pedido deve conter status \"WaitingPayment\"", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
#line 48
    testRunner.Given("que crio um pedido novo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 49
    testRunner.Then("o status do pedido deve ser \"WaitingPayment\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
#line 50
    testRunner.And("o pedido deve constar na base com o status \"WaitingPayment\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cancelamento de pedido com status \"WaitingPayment\"")]
        [Xunit.TraitAttribute("FeatureTitle", "Gerenciamento de pedidos")]
        [Xunit.TraitAttribute("Description", "Cancelamento de pedido com status \"WaitingPayment\"")]
        [Xunit.TraitAttribute("Category", "clean_sellers")]
        [Xunit.TraitAttribute("Category", "clean_products")]
        public void CancelamentoDePedidoComStatusWaitingPayment()
        {
            string[] tagsOfScenario = new string[] {
                    "clean_sellers",
                    "clean_products"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancelamento de pedido com status \"WaitingPayment\"", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
#line 55
    testRunner.Given("que crio um pedido novo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 56
    testRunner.And("atualizo o status do pedido para \"Cancelled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 57
    testRunner.Then("o status do pedido deve ser \"Cancelled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
#line 58
    testRunner.And("o pedido deve constar na base com o status \"Cancelled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cancelamento de pedido com status \"PaymentApproved\"")]
        [Xunit.TraitAttribute("FeatureTitle", "Gerenciamento de pedidos")]
        [Xunit.TraitAttribute("Description", "Cancelamento de pedido com status \"PaymentApproved\"")]
        [Xunit.TraitAttribute("Category", "clean_sellers")]
        [Xunit.TraitAttribute("Category", "clean_products")]
        public void CancelamentoDePedidoComStatusPaymentApproved()
        {
            string[] tagsOfScenario = new string[] {
                    "clean_sellers",
                    "clean_products"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancelamento de pedido com status \"PaymentApproved\"", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 62
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
#line 63
    testRunner.Given("que crio um pedido novo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 64
    testRunner.And("atualizo o status do pedido para \"PaymentApproved\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 65
    testRunner.And("atualizo o status do pedido para \"Cancelled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 66
    testRunner.Then("o status do pedido deve ser \"Cancelled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
#line 67
    testRunner.And("o pedido deve constar na base com o status \"Cancelled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cancelamento de pedido com status \"Sent\"")]
        [Xunit.TraitAttribute("FeatureTitle", "Gerenciamento de pedidos")]
        [Xunit.TraitAttribute("Description", "Cancelamento de pedido com status \"Sent\"")]
        [Xunit.TraitAttribute("Category", "clean_sellers")]
        [Xunit.TraitAttribute("Category", "clean_products")]
        public void CancelamentoDePedidoComStatusSent()
        {
            string[] tagsOfScenario = new string[] {
                    "clean_sellers",
                    "clean_products"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancelamento de pedido com status \"Sent\"", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
#line 72
    testRunner.Given("que crio um pedido novo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 73
    testRunner.And("atualizo o status do pedido para \"PaymentApproved\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 74
    testRunner.And("atualizo o status do pedido para \"Sent\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 75
    testRunner.And("informo o status do pedido para \"Cancelled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 76
    testRunner.When("submeto a atualização do status do pedido deve lançar erro \"[POT-004] Not allowed" +
                        " to change from status [Sent] to requested status [Cancelled].\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 77
    testRunner.And("o pedido deve constar na base com o status \"Sent\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cancelamento de pedido com status \"Delivered\"")]
        [Xunit.TraitAttribute("FeatureTitle", "Gerenciamento de pedidos")]
        [Xunit.TraitAttribute("Description", "Cancelamento de pedido com status \"Delivered\"")]
        [Xunit.TraitAttribute("Category", "clean_sellers")]
        [Xunit.TraitAttribute("Category", "clean_products")]
        public void CancelamentoDePedidoComStatusDelivered()
        {
            string[] tagsOfScenario = new string[] {
                    "clean_sellers",
                    "clean_products"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancelamento de pedido com status \"Delivered\"", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
#line 82
    testRunner.Given("que crio um pedido novo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 83
    testRunner.And("atualizo o status do pedido para \"PaymentApproved\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 84
    testRunner.And("atualizo o status do pedido para \"Sent\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 85
    testRunner.And("atualizo o status do pedido para \"Delivered\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 86
    testRunner.And("informo o status do pedido para \"Cancelled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 87
    testRunner.When("submeto a atualização do status do pedido deve lançar erro \"[POT-004] Not allowed" +
                        " to change from status [Delivered] to requested status [Cancelled].\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 88
    testRunner.And("o pedido deve constar na base com o status \"Delivered\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cancelamento de pedido com status \"Cancelled\"")]
        [Xunit.TraitAttribute("FeatureTitle", "Gerenciamento de pedidos")]
        [Xunit.TraitAttribute("Description", "Cancelamento de pedido com status \"Cancelled\"")]
        [Xunit.TraitAttribute("Category", "clean_sellers")]
        [Xunit.TraitAttribute("Category", "clean_products")]
        public void CancelamentoDePedidoComStatusCancelled()
        {
            string[] tagsOfScenario = new string[] {
                    "clean_sellers",
                    "clean_products"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancelamento de pedido com status \"Cancelled\"", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 92
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
#line 93
    testRunner.Given("que crio um pedido novo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 94
    testRunner.And("atualizo o status do pedido para \"Cancelled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 95
    testRunner.And("informo o status do pedido para \"Cancelled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 96
    testRunner.When("submeto a atualização do status do pedido deve lançar erro \"[POT-004] Not allowed" +
                        " to change from status [Cancelled] to requested status [Cancelled].\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 97
    testRunner.And("o pedido deve constar na base com o status \"Cancelled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GerenciamentoDePedidosFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GerenciamentoDePedidosFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
